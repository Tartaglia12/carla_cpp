// Copyright (c) 2020 Computer Vision Center (CVC) at the Universitat Autonoma
// de Barcelona (UAB).
//
// This work is licensed under the terms of the MIT license.
// For a copy, see <https://opensource.org/licenses/MIT>.

#pragma once

#include "carla/MsgPack.h"

#include <cstdint>

namespace carla {
namespace rpc {

  enum class CityObjectLabel : uint8_t {
    None         =    0u,
    // 城市场景中目标的标签总和
    // 定义一个名为Roads的枚举值（从代码形式和后续内容推测这里大概率是在定义一个枚举类型中的各个枚举常量，不过完整的枚举类型定义可能在代码上下文的其他地方，这里单独展示了各个常量的赋值情况），赋值为1u（u表示无符号整数类型后缀，意味着这是一个无符号整数类型的常量），
// 可能用于标识地图或者场景中的道路元素，在进行场景元素分类、筛选、标记等操作时，可以通过这个值来代表道路相关的对象，方便程序进行区分和处理。
Roads        =    1u,

// 定义Sidewalks枚举值，赋值为2u，通常用于表示人行道相关的元素，在涉及地图渲染、碰撞检测、路径规划等与场景中人行道相关的功能实现时，通过这个值来区分和指代人行道对象。
Sidewalks    =    2u,

// 定义Buildings枚举值，赋值为3u，此常量大概率用于标记场景中的建筑物，比如在游戏开发、三维建模或者城市规划模拟等场景中，借助这个值来识别哪些是建筑物元素，以便进行建筑物相关的操作，像渲染外观、判断是否可进入等操作。
Buildings    =    3u,

// 定义Walls枚举值，赋值为4u，一般用来代表墙壁相关的元素，在室内场景建模、场景碰撞处理等情况下，可以通过这个值确定哪些是墙壁，进而采取相应的处理逻辑，例如阻止角色穿越墙壁等。
Walls        =    4u,

// 定义Fences枚举值，赋值为5u，用于标识围栏相关的对象，比如在区分场景中的不同障碍物类型或者进行场景安全区域划分等操作时，通过这个值来表示围栏元素，方便后续的处理和判断。
Fences       =    5u,

// 定义Poles枚举值，赋值为6u，通常用于表示杆子类的物体，像路灯杆、电线杆等都可以用这个值来标记，在涉及对杆子类物体进行渲染、管理或者与它们产生交互（比如碰撞等）的相关程序逻辑中会用到这个标识。
Poles        =    6u,

// 定义TrafficLight枚举值，赋值为7u，显然是用于标记交通信号灯元素，在交通模拟、自动驾驶场景开发等场景中，依靠这个值来区分交通信号灯，以便进行信号灯状态判断、根据信号灯控制车辆或行人通行等操作。
TrafficLight =    7u,

// 定义TrafficSigns枚举值，赋值为8u，用于标识交通标识牌，在需要识别和处理道路上的各种交通标识（如限速牌、指示牌等）的程序中，通过这个值来区分它们，进而根据标识内容执行相应的操作，比如调整车速、改变行驶方向等。
TrafficSigns =    8u,

// 定义Vegetation枚举值，赋值为9u，主要用来标记植被相关的元素，像树木、草丛等都属于植被范畴，在场景渲染中可以根据这个值决定植被的绘制方式，或者在场景编辑中用于筛选植被对象等操作。
Vegetation   =    9u,

// 定义Terrain枚举值，赋值为10u，通常用于表示地形相关的部分，比如山地、平原等不同地形类型在程序中可以用这个值来标识，在进行地形渲染、地形碰撞检测以及基于地形的路径规划等操作时会用到这个标记。
Terrain      =   10u,

// 定义Sky枚举值，赋值为11u，代表天空相关的元素，在图形渲染中，通过这个值来确定天空的绘制参数、颜色等属性，或者在场景管理中用于区分天空与其他场景元素。
Sky          =   11u,

// 定义Pedestrians枚举值，赋值为12u，用于标识行人元素，在模拟行人行为、行人与其他物体碰撞检测以及交通场景中对行人通行进行管理等程序逻辑中，借助这个值来区分行人，方便进行相应的操作。
Pedestrians  =   12u,

// 定义Rider枚举值，赋值为13u，大概率用于表示骑行者（如骑自行车、骑摩托车等的人）相关的元素，在涉及交通场景中对骑行者的行为模拟、交通规则管理等方面会用到这个标识来区分骑行者群体。
Rider        =   13u,

// 定义Car枚举值，赋值为14u，很明显是用于标记汽车相关的元素，在车辆管理、自动驾驶模拟、交通流量模拟等众多与汽车相关的程序场景中，通过这个值来区分汽车对象，进而进行各种操作，如控制车辆行驶、统计车辆数量等。
Car          =   14u,

// 定义Truck枚举值，赋值为15u，用于标识卡车相关的元素，在物流运输模拟、交通场景中区分不同车型等操作时，可以通过这个值来专门指代卡车，以便进行卡车相关的特定处理，比如载重计算、车道限制等。
Truck        =   15u,

// 定义Bus枚举值，赋值为16u，主要用来标记公交车元素，在公交调度模拟、城市交通规划等涉及公交车的程序场景中，借助这个值来区分公交车，进而进行诸如公交线路规划、乘客上下车管理等操作。
Bus          =   16u,

// 定义Train枚举值，赋值为17u，用于标识火车相关的元素，在铁路交通模拟、列车调度系统等相关程序中，通过这个值来区分火车，方便进行列车运行控制、轨道资源管理等操作。
Train        =   17u,

// 定义Motorcycle枚举值，赋值为18u，显然是用于标记摩托车元素，在交通场景中对摩托车的行驶管理、交通规则应用等操作时，通过这个值来区分摩托车，以便进行相应的处理，比如速度限制、车道分配等。
Motorcycle   =   18u,

// 定义Bicycle枚举值，赋值为19u，用于标识自行车元素，在模拟自行车出行、城市慢行交通管理等程序场景中，通过这个值来区分自行车，方便进行诸如路径规划、停车管理等操作。
Bicycle      =   19u,

// 以下是自定义标签部分的说明：

// 定义Static枚举值，赋值为20u，从名字推测可能用于表示静态的元素，在场景中有一些物体是固定不动的，比如建筑物基础、固定的雕塑等，可以用这个值来标记它们，方便在处理动态与静态物体区分等相关逻辑时使用。
Static       =   20u,

// 定义Dynamic枚举值，赋值为21u，与Static相对应，大概率用于表示动态的元素，像车辆、行人等会移动的物体可以通过这个值来标识，在涉及场景更新、物体运动模拟等操作时，依据这个值来筛选出动态对象进行相应处理。
Dynamic      =   21u,

// 定义Other枚举值，赋值为22u，通常用于表示其他不好归类或者剩余的元素，当场景中有一些元素不属于前面明确分类的那些类型时，可以统一用这个值来标记，起到一个兜底的作用。
Other        =   22u,

// 定义Water枚举值，赋值为23u，用于标识水域相关的元素，在场景渲染中决定水的绘制效果，或者在涉及水上交通、涉水路径规划等场景中，通过这个值来区分水域，进而采取相关的处理逻辑，比如限制陆地交通工具进入等。
Water        =   23u,

// 定义RoadLines枚举值，赋值为24u，主要用来标记道路标线相关的元素，在交通模拟、自动驾驶中，车辆需要依据道路标线来规范行驶，通过这个值可以识别出道路标线元素，便于进行相关的判断和操作，比如判断是否压线等。
RoadLines    =   24u,

// 定义Ground枚举值，赋值为25u，通常用于表示地面相关的元素，在场景渲染、碰撞检测等操作中，地面是一个基础部分，通过这个值可以区分地面与其他场景元素，进行相应的处理，比如设置地面的材质、碰撞属性等。
Ground       =   25u,

// 定义Bridge枚举值，赋值为26u，用于标识桥梁相关的元素，在交通规划、场景渲染等涉及桥梁的程序场景中，借助这个值来区分桥梁，进而进行桥梁相关的操作，比如桥梁的承重计算、外观绘制等。
Bridge       =   26u,

// 定义RailTrack枚举值，赋值为27u，主要用来标记铁轨相关的元素，在铁路交通相关的程序中，如列车运行模拟、轨道铺设规划等，通过这个值来区分铁轨，方便进行相应的操作，比如判断列车是否在轨道上、轨道连接情况等。
RailTrack    =   27u,

// 定义GuardRail枚举值，赋值为28u，用于标识护栏相关的元素，在道路安全防护、场景边界设置等操作中，通过这个值来区分护栏，进而进行相关的处理，比如判断是否碰撞到护栏、护栏的可见性设置等。
GuardRail    =   28u,

// 定义Any枚举值，赋值为0xFF（十六进制表示的无符号整数，转换为十进制是255），这个值可能具有特殊用途，比如用于表示任意类型的元素，在一些通用的筛选、查询操作中，当不需要区分具体类型，想要涵盖所有类型时，可以使用这个值来进行匹配操作，不过具体含义还是要结合具体的业务场景和代码逻辑来确定。
Any          =  0xFF
  };

} // namespace rpc
} // namespace carla

MSGPACK_ADD_ENUM(carla::rpc::CityObjectLabel);
